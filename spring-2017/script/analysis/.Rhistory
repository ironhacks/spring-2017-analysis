scores_loc <- read.table("/Users/jialincheoh/Desktop/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc <- read.table("Users/jialincheoh/Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc <- read.table("Users/jialincheoh/Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc <- read.table("/Users/jialincheoh/Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc
training<-scores_loc$improve.sum.novel[scores_loc$Group==0]
control<-scores_loc$improve.sum.novel.phase5[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.novel[scores_loc$Group==0]
control<-scores_loc$improve.sum.novel[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.novel[scores_loc$Group==2]
control<-scores_loc$improve.sum.novel[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.novel[scores_loc$Group==1]
control<-scores_loc$improve.sum.novel[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.novel[scores_loc$Group==2]
control<-scores_loc$improve.sum.novel[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.ur[scores_loc$Group==2]
control<-scores_loc$improve.sum.ur[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.total[scores_loc$Group==2]
control<-scores_loc$improve.sum.total[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.ur[scores_loc$Group==2]
control<-scores_loc$improve.sum.ur[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
interaction <- aov(improve.sum.novel ~ Group*sum.add.loc, data = scores_loc)
summary(interaction)
training<-scores_loc$improve.sum.novel[scores_loc$Group==2]
control<-scores_loc$improve.sum.novel[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.novel[scores_loc$Group==2]
control<-scores_loc$improve.sum.novel[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.infovis[scores_loc$Group==2]
control<-scores_loc$improve.sum.infovis[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.vis[scores_loc$Group==2]
control<-scores_loc$improve.sum.vis[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
interaction <- anova(lm(improve.sum.novel ~ Group, data = scores_loc))
summary(interaction)
interaction <- anova(lm(improve.sum.novel ~ Group, data = scores_loc))
summary(interaction)
interaction <- anova(lm(improve.sum.novel ~ Group, data = scores_loc))
summary(interaction)
interaction <- lm(improve.sum.novel ~ Group, data = scores_loc)
summary(interaction)
training<-scores_loc$improve.novel.45[scores_loc$Group==2]
control<-scores_loc$improve.novel.45[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
oneway.test(improve.sum.novel ~ Group, data = scores_loc, var.equal = FALSE)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc))
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , data=scores_loc)
scores_loc <- read.table("/Users/jialincheoh/Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc
lmLength <- residuals(lm(improve.sum.novel ~ Group) , data=scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , data=scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , data=scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , data=scores_loc)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group, data=scores_loc))
shapiro.test(lmLength)
lmLength <- (lm(improve.sum.novel ~ Group, data=scores_loc))
shapiro.test(lmLength)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc)
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc))
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc))
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc))
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc))
lmLength <- (lm(improve.sum.novel ~ Group), data=scores_loc))
lmLength <- (lm(improve.sum.novel ~ Group, data=scores_loc))
shapiro.test(lmLength)
lmLength <- (lm(improve.sum.novel ~ Group, data=scores_loc))
shapiro.test(lmLength)
lmLength <- lm(improve.sum.novel ~ Group, data=scores_loc)
shapiro.test(lmLength)
lmLength <- lm(improve.sum.novel ~ Group, data=scores_loc)
shapiro.test(lmLength)
lmLength <- lm(improve.sum.novel ~ Group, data=scores_loc)
shapiro.test(lmLength)
lmLength <- residuals(lm(improve.sum.novel ~ Group, data=scores_loc))
shapiro.test(lmLength)
qqnorm(lmLength)
qqline(lmLength)
lmLength <- lm(total.phase5 ~ improve.sum.novel, data=scores_loc)
lmLength <- lm(total.phase5 ~ improve.sum.novel, data=scores_loc)
lmLength <- lm(total.phase5 ~ improve.sum.novel, data=scores_loc)
summary(lmLength)
lmLength <- lm(total.phase5 ~ novel.phase5, data=scores_loc)
lmLength <- lm(total.phase5 ~ novelty.phase5, data=scores_loc)
summary(lmLength)
scores_loc <- read.table("/Users/jialincheoh/Library/CloudStorage/Box-Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc
scores_loc <- read.table("/Users/jialincheoh/Library/CloudStorage/Box-Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc
lmLength <- residuals(lm(improve.sum.novel ~ Group, data=scores_loc))
shapiro.test(lmLength)
qqnorm(lmLength)
qqline(lmLength)
lmLength <- lm(total.phase5 ~ novelty.phase5, data=scores_loc)
summary(lmLength)
model<-lm(novelty.phase5~factor(Group)*factor(sum.add.loc), data=scores_loc)
anova(model)
library(Rmisc)
scores_loc <- read.table("/Users/jialincheoh/Library/CloudStorage/Box-Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc
lmLength <- residuals(lm(improve.sum.novel ~ Group, data=scores_loc))
shapiro.test(lmLength)
qqnorm(lmLength)
qqline(lmLength)
lmLength <- lm(total.phase5 ~ novelty.phase5, data=scores_loc)
summary(lmLength)
model<-lm(novelty.phase5~factor(Group)*factor(sum.add.loc), data=scores_loc)
anova(model)
library(Rmisc)
library(ggplot2)
stats <- summarySE(scores_loc, measurevar="novelty.phase5", groupvars=c("Group"))
stats
library(Rmisc)
library(ggplot2)
stats <- summarySE(scores_loc, measurevar="user.requirement.phase5", groupvars=c("Group"))
stats
library(Rmisc)
library(ggplot2)
stats <- summarySE(scores_loc, measurevar="tech.phase5", groupvars=c("Group"))
stats
library(Rmisc)
library(ggplot2)
stats <- summarySE(scores_loc, measurevar="infovis.phase5", groupvars=c("Group"))
stats
library(Rmisc)
library(ggplot2)
stats <- summarySE(scores_loc, measurevar="sum.add.loc", groupvars=c("Group"))
stats
var(scores_loc$novelty.phase5[scores_loc$Group==0])
var(scores_loc$novelty.phase5[scores_loc$Group==3])
training<-scores_loc$tech.phase5[scores_loc$Group==0]
control<-scores_loc$tech.phase5[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$infovis.phase5[scores_loc$Group==0]
control<-scores_loc$infovis.phase5[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$novelty.phase5[scores_loc$Group==0]
control<-scores_loc$novelty.phase5[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$user.requirement.phase5[scores_loc$Group==0]
control<-scores_loc$user.requirement.phase5[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$improve.sum.novel[scores_loc$Group==2]
control<-scores_loc$improve.sum.novel[scores_loc$Group==3]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
interaction <- lm(improve.sum.novel ~ Group, data = scores_loc)
summary(interaction)
training<-scores_loc$tech.phase5[scores_loc$Group==0]
control<-scores_loc$tech.phase5[scores_loc$Group==2]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$novelty.phase5[scores_loc$Group==0]
control<-scores_loc$novelty.phase5[scores_loc$Group==2]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$infovis.phase5[scores_loc$Group==0]
control<-scores_loc$infovis.phase5[scores_loc$Group==2]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$user.requirement.phase5[scores_loc$Group==0]
control<-scores_loc$user.requirement.phase5[scores_loc$Group==2]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'less')
training<-scores_loc$sum.add.loc[scores_loc$Group==3]
control<-scores_loc$sum.add.loc[scores_loc$Group==2]
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'greater')
scores_loc
#perform Bartlett's test
bartlett.test(novelty.phase5 ~ Group, data = scores_loc)
#perform Welch's ANOVA
oneway.test(novelty.phase5 ~ Group, data = scores_loc, var.equal = FALSE)
#perform Welch's ANOVA
oneway.test(total.phase5 ~ Group, data = scores_loc, var.equal = FALSE)
#perform Welch's ANOVA
oneway.test(user.requirement.phase5 ~ Group, data = scores_loc, var.equal = FALSE)
#perform Welch's ANOVA
oneway.test(tech.phase5 ~ Group, data = scores_loc, var.equal = FALSE)
#perform Welch's ANOVA
oneway.test(infovis.phase5 ~ Group, data = scores_loc, var.equal = FALSE)
oneway.test(improve.sum.novel ~ Group, data = scores_loc, var.equal = FALSE)
lmLength <- residuals(lm(improve.sum.novel ~ Group) , scores_loc)
scores_loc <- read.table("/Users/jialincheoh/Library/CloudStorage/Box-Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc
scores_loc <- read.table("/Users/jialincheoh/Library/CloudStorage/Box-Box/NSF IronHacks App 2016 - 2019/05 Experiments 2017/01 Hack Spring 2017/01 Summary Spring 2017/02 Data/processed-data/overall_score_click_result.csv", header=TRUE, sep = ",")
scores_loc
bogota_3 <- subset(scores_loc, Group == 3)
bogota_3
bogota_2 <- subset(scores_loc, Group == 2)
bogota_2
bogota_1 <- subset(scores_loc, Group == 1)
bogota_1
summary(lm(bogota_3$user.requirement.phase5~bogota_3$sum.clicks.count))
summary(lm(bogota_3$novelty.phase5~bogota_3$sum.clicks.count))
summary(lm(bogota_3$user.requirement.phase5~bogota_3$project.clicks.count))
summary(lm(bogota_3$user.requirement.phase5~bogota_3$score.clicks.count))
summary(lm(bogota_3$novelty.phase5~bogota_3$score.clicks.count))
summary(lm(bogota_3$novelty.phase5~bogota_3$project.clicks.count))
summary(lm(bogota_2$novelty.phase5~bogota_2$sum.clicks.count))
summary(lm(bogota_2$user.requirement.phase5~bogota_2$sum.clicks.count))
summary(lm(bogota_1$novelty.phase5~bogota_1$sum.clicks.count))
summary(lm(bogota_1$user.requirement.phase5~bogota_1$sum.clicks.count))
summary(lm(scores_loc$user.requirement.phase5~scores_loc$sum.clicks.count))
summary(lm(scores_loc$user.requirement.phase5~scores_loc$project.clicks.count))
summary(lm(scores_loc$user.requirement.phase5~scores_loc$score.clicks.count))
summary(lm(scores_loc$novelty.phase5~scores_loc$sum.clicks.count))
summary(lm(scores_loc$novelty.phase5~scores_loc$project.clicks.count))
summary(lm(scores_loc$novelty.phase5~scores_loc$score.clicks.count))
scatter.smooth(bogota_3$sum.clicks.count, bogota_3$user.requirement.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(bogota_3$user.requirement.phase5~bogota_3$sum.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(bogota_3$sum.clicks.count, bogota_3$novelty.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(bogota_3$novelty.phase5~bogota_3$sum.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(bogota_3$score.clicks.count, bogota_3$novelty.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(bogota_3$novelty.phase5~bogota_3$score.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(bogota_1$sum.clicks.count, bogota_1$novelty.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(bogota_1$novelty.phase5~bogota_1$sum.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(bogota_1$sum.clicks.count, bogota_1$user.requirement.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(bogota_1$user.requirement.phase5~bogota_1$sum.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(scores_loc$sum.clicks.count, scores_loc$user.requirement.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(scores_loc$user.requirement.phase5~scores_loc$sum.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(scores_loc$project.clicks.count, scores_loc$user.requirement.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(scores_loc$user.requirement.phase5~scores_loc$project.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(scores_loc$score.clicks.count, scores_loc$user.requirement.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(scores_loc$user.requirement.phase5~scores_loc$score.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(scores_loc$sum.clicks.count, scores_loc$novelty.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(scores_loc$novelty.phase5~scores_loc$sum.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(scores_loc$project.clicks.count, scores_loc$novelty.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(scores_loc$novelty.phase5~scores_loc$project.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
scatter.smooth(scores_loc$score.clicks.count, scores_loc$novelty.phase5, lpars = list(col = "blue", lwd = 3, lty = 3))
abline(lm(scores_loc$novelty.phase5~scores_loc$score.clicks.count), col='red',lwd=3)
legend('topright', c('Linear','Smoothing'),
lty=c(1,2), lwd=c(3,3), col=c('red','blue'))
library(Rmisc)
library(ggplot2)
summary(bogota_1['score.clicks.count'])
library(Rmisc)
library(ggplot2)
summary(bogota_2['project.clicks.count'])
library(Rmisc)
library(ggplot2)
summary(bogota_3['project.clicks.count'])
library(Rmisc)
library(ggplot2)
summary(bogota_3['score.clicks.count'])
training<-bogota_3$project.clicks.count
control<-bogota_2$project.clicks.count
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'greater')
training<-bogota_3$project.clicks.hacker
control<-bogota_2$project.clicks.hacker
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'greater')
training<-bogota_3$unique_apps
control<-bogota_2$unique_apps
mean(training, na.rm=T)-mean(control, na.rm=T)
t.test(training, control, alternative = 'greater')
install.packages("magrittr") # package installations are only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
df %>%
group_by(group) %>%
summarize(mean_novelty = mean(ln_novelty), median_novelty = median(ln_novelty), max_novelty = max(ln_novelty))
install.packages("magrittr") # package installations are only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
df %>%
group_by(group) %>%
summarize(mean_novelty = mean(ln_novelty), median_novelty = median(ln_novelty), max_novelty = max(ln_novelty))
install.packages("magrittr")
install.packages("dplyr")
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
df %>%
group_by(group) %>%
summarize(mean_novelty = mean(ln_novelty), median_novelty = median(ln_novelty), max_novelty = max(ln_novelty))
tapply(df$ln_novelty, df$group, summary)
tapply(df$ln_novelty, df$group, summary)
install.packages("dplyr")              # Install dplyr package
library("dplyr")                       # Load dplyr package
df %>%                               # Summary by group using dplyr
group_by(group) %>%
summarize(min = min(ln_novelty),
q1 = quantile(ln_novelty, 0.25),
median = median(ln_novelty),
mean = mean(ln_novelty),
q3 = quantile(ln_novelty, 0.75),
max = max(ln_novelty))
install.packages("dplyr")
library("dplyr")                       # Load dplyr package
df %>%                               # Summary by group using dplyr
group_by(group) %>%
summarize(min = min(ln_novelty),
q1 = quantile(ln_novelty, 0.25),
median = median(ln_novelty),
mean = mean(ln_novelty),
q3 = quantile(ln_novelty, 0.75),
max = max(ln_novelty))
tapply(df$ln_novelty, df$group,
function(x) format(summary(x), scientific = TRUE))
describeBy(df$ln_novelty,df$group)
library(psych)
install.packages('psych')
library(psych)
describeBy(df$ln_novelty,df$group)
library(dplyr)
data % > %
group_by(ln_novelty) % > %
summarise(mean_ln_novelty = mean(ln_novelty))
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
data % > %
group_by(ln_novelty) % > %
summarise(mean_ln_novelty = mean(ln_novelty))
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
data % > %
group_by(ln_novelty) % > %
summarise(mean_ln_novelty = mean(ln_novelty))
library(magrittr)
library(dplyr)
data % > %
group_by(ln_novelty) % > %
summarise(mean_ln_novelty = mean(ln_novelty))
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
library(dplyr)
data % > %
group_by(ln_novelty) % > %
summarise(mean_ln_novelty = mean(ln_novelty))
library(magrittr)
library(dplyr)
data %>%
group_by(ln_novelty) %>%
summarise(mean_ln_novelty = mean(ln_novelty))
library(data.table)
df[ ,list(mean=mean(ln_novelty)), by=group]
library(data.table)
dt[ ,list(mean=mean(df$ln_novelty)), by=df$group]
aggregate(df$ln_novelty, list(df$group), FUN=mean)
# reading input
df <- read.csv("novelty_complete_rev.csv", header =TRUE, sep=",")
#df <- df[complete.cases(df), ]
df
df$ln_novelty <- log(df$novelty+1)
df$ln_abs_perform_diff_best <- log(df$abs_perform_diff_best+1)
df$group = factor(df$group)
df
df$group <- relevel(df$group, ref = "3")
mod <- lm(ln_novelty ~ factor(group), data=df)
summary(mod)
mod <- lm(ln_abs_perform_diff_best ~ factor(group), data=df)
summary(mod)
with(df, interaction.plot(group, phase, ln_novelty, ylim=c(0, max(ln_novelty)))) # interaction plot
with(df, interaction.plot(group, phase, ln_abs_perform_diff_best, ylim=c(0, max(ln_abs_perform_diff_best)))) # interaction plot
df$group <- relevel(df$group, ref = "3")
mod2 <- lm(ln_novelty ~ factor(group) + abs_perform_diff_best + Q7_Q7_1 + Q7_Q7_2 + Q8_Q8_1 + Q10, data=df)
summary(mod2)
## check multicollinearity between variables
install.packages("car")
library(car)
car::vif(mod2)
