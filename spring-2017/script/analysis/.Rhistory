library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- df %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(df),
size = 1,
repel = TRUE)
# K-means clustering
clust <- kmeans(mds, 3)$cluster %>%
as.factor()
mds <- mds %>%
mutate(groups = clust)
# Plot and color by groups
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(df),
color = "groups",
palette = "jco",
size = 1,
ellipse = TRUE,
ellipse.type = "convex",
repel = TRUE)
df <- read.csv("stage4_bogota0_edge.csv")
df
# K-means clustering
clust <- kmeans(mds, 3)$cluster %>%
as.factor()
mds <- mds %>%
mutate(groups = clust)
# Plot and color by groups
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(df),
color = "groups",
palette = "jco",
title = "Stage 4 No Transparency",
size = 1,
ellipse = TRUE,
ellipse.type = "convex",
repel = TRUE)
df <- read.csv("stage1_bogota3_edge.csv")
df
# add the rownames as a proper column
rownames(df) <- NULL
df
vec <- colnames(df)
vec <- vec[-1]
vec
# Load required packages
library(magrittr)
library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- df %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = vec,
title = "Stage 1 Full Transparency",
size = 1,
repel = TRUE)
# K-means clustering
clust <- kmeans(mds, 3)$cluster %>%
as.factor()
mds <- mds %>%
mutate(groups = clust)
# Plot and color by groups
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(df),
color = "groups",
palette = "jco",
title = "Stage 1 Full Transparency",
size = 1,
ellipse = TRUE,
ellipse.type = "convex",
repel = TRUE)
# K-means clustering
clust <- kmeans(mds, 3)$cluster %>%
as.factor()
mds <- mds %>%
mutate(groups = clust)
# Plot and color by groups
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = vec,
color = "groups",
palette = "jco",
title = "Stage 1 Full Transparency",
size = 1,
ellipse = TRUE,
ellipse.type = "convex",
repel = TRUE)
df <- read.csv("stage1_bogota3_edge.csv")
df
# add the rownames as a proper column
rownames(df) <- NULL
df
vec <- colnames(df)
vec <- vec[-1]
vec
# Load required packages
library(magrittr)
library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- df %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = vec,
title = "Stage 1 Full Transparency",
size = 1,
repel = TRUE)
df <- read.csv("stage1_bogota3_edge.csv")
df
# add the rownames as a proper column
rownames(df) <- NULL
df
vec <- colnames(df)
vec <- vec[-1]
vec
# Load required packages
library(magrittr)
library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- df %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = vec,
title = "Stage 1 Full Transparency",
size = 1,
repel = TRUE)
# Load required packages
library(magrittr)
library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- df %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
options(ggrepel.max.overlaps = Inf)
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = vec,
title = "Stage 1 Full Transparency",
size = 1,
repel = TRUE)
data("swiss")
head(swiss)
library(magrittr)
library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = rownames(swiss),
size = 1,
repel = TRUE)
# add the rownames as a proper column
rownames(df) <- NULL
df
vec <- colnames(df)
vec <- vec[-1]
vec
# Load required packages
library(magrittr)
library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- df %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
options(ggrepel.max.overlaps = Inf)
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = vec,
title = "Stage 1 Full Transparency",
size = 1,
repel = TRUE)
# Load required packages
library(magrittr)
library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- df %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
options(ggrepel.max.overlaps = Inf)
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = vec,
title = "Stage 1 Full Transparency",
size = 1) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', 'top4', 'bottom1', 'bottom2', 'bottom3', 'bottom4'), label, ""))
)
df <- read.csv("stage1_bogota3_edge.csv")
df
# add the rownames as a proper column
rownames(df) <- NULL
df
vec <- colnames(df)
vec <- vec[-1]
vec
# Load required packages
library(magrittr)
library(dplyr)
library(ggpubr)
# Cmpute MDS
mds <- df %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(mds) <- c("Dim.1", "Dim.2")
# Plot MDS
options(ggrepel.max.overlaps = Inf)
ggscatter(mds, x = "Dim.1", y = "Dim.2",
label = vec,
title = "Stage 1 Full Transparency",
size = 1) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', 'top4', 'bottom1', 'bottom2', 'bottom3', 'bottom4'), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- rownames(swiss)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
df <- read.csv("stage1_bogota3_edge.csv")
df
# add the rownames as a proper column
rownames(df) <- NULL
df
vec <- colnames(df)
vec <- vec[-1]
vec
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- rownames(swiss)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1, repel = True
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1, repel = TRUE
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1, repel = TRUE
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1, repel = TRUE
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1"), label, ""))
)
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1, repel = TRUE
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1", "bottom2", "bottom3", "bottom4"), label, ""))
)
# K-means clustering
clust <- kmeans(mds, 3)$cluster %>%
as.factor()
df <- read.csv("stage1_bogota3_edge.csv")
df
# add the rownames as a proper column
rownames(df) <- NULL
df
vec <- colnames(df)
vec <- vec[-1]
vec
library(dplyr, warn.conflicts = FALSE)
library(ggpubr)
#> Loading required package: ggplot2
library(ggrepel)
# Cmpute MDS
mds <- swiss %>%
dist() %>%
cmdscale() %>%
as_tibble()
#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if
#> `.name_repair` is omitted as of tibble 2.0.0.
#> ℹ Using compatibility `.name_repair`.
colnames(mds) <- c("Dim.1", "Dim.2")
mds$label <- colnames(df)
# Plot MDS
ggscatter(mds,
x = "Dim.1", y = "Dim.2",
size = 1, repel = TRUE
) +
ggrepel::geom_text_repel(
aes(label = if_else(label %in% c('top1', 'top2', 'top3', "top4", "bottom1", "bottom2", "bottom3", "bottom4"), label, ""))
)
# K-means clustering
clust <- kmeans(mds, 3)$cluster %>%
as.factor()
